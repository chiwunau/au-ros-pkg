(defun test-door-direction (&optional (r *door-radius*) (use-arm *use-arm*))
  ;;by pushing or pulling 10 cm and see the displacement of av
  (let ((av-org (send *ri* :state :potentio-vector))
	(ret (list nil nil nil nil)) ;;pull push pull-axis-up push-axis-up
	cds-knob cds-gripper cds-gripper-start av-seq d res move-dist dist)
    
    (dotimes (i 2) ;;0:pull 1:push
      (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
      (setq cds-knob (make-cascoords :coords (send *cds-knob-init* :copy-worldcoords)))
      (setq cds-gripper-start (send *pr2* use-arm :end-coords :copy-worldcoords))
      (setq cds-gripper (make-cascoords :coords (send cds-gripper-start :copy-worldcoords)))
      (send cds-knob :assoc cds-gripper)
      (setq av-seq (list (send *pr2* :angle-vector)))
      (setq move-dist (* r (sin (deg2rad 10))))
      (dotimes (d 10)
	(send cds-knob :translate (float-vector 
				   (* (if (= i 0) -1 1) r (sin (deg2rad 1)))  0.0 0.0))
	(send *pr2* :larm :inverse-kinematics (send cds-gripper :copy-worldcoords) :rotation-axis t)
	(setq av-seq (append av-seq (list (send *pr2* :angle-vector)))))
      ;; (print av-seq)
      (send *ri* :angle-vector-sequence av-seq 100)
      (send *ri* :wait-interpolation)
      (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
      (setq dist (v- (send *pr2* use-arm :end-coords :worldpos) (send  cds-gripper-start :worldpos)))
      (setq dist (transform (transpose (send cds-gripper-start :rot)) dist))
      (print dist)
      (when (and (= i 0) (< (elt dist 0) (/ move-dist -1.5)) (> (elt dist 1) 0))
	(print "hoge0")
	(setf (elt ret 0) t)
	(setf (elt ret 2) nil))
      (when (and (= i 0) (< (elt dist 0) (/ move-dist -1.5)) (< (elt dist 1) 0))
	(print "hoge1")
	(setf (elt ret 0) t)
	(setf (elt ret 2) t))
      (when (and (= i 1) (> (elt dist 0) (/ move-dist 1.5)) (> (elt dist 1) 0))
	(print "hoge2")
	(setf (elt ret 1) t)
	(setf (elt ret 3) t))	
      (when (and (= i 1) (> (elt dist 0) (/ move-dist 1.5)) (< (elt dist 1) 0))
	(print "hoge3")
	(setf (elt ret 1) t)
	(setf (elt ret 3) nil))
      (send *ri* :angle-vector av-org 1000)
      (send *ri* :wait-interpolation)
      )

    (ros::ros-info (format nil "pull: ~A push: ~A pull-axis-up: ~A push-axis-up: ~A" (elt ret 0) (elt ret 1) (elt ret 2) (elt ret 3)))
  ))

(defun test-knob-direction (&optional (use-arm *use-arm*) (r *knob-radius*))
  (let* ((pre-av (send *ri* :state :potentio-vector))
	 (cds-gripper (make-cascoords :coords (send *pr2* *use-arm* :end-coords :copy-worldcoords)))
	 (cds-knob (send cds-gripper :copy-worldcoords))
	 pos-diff0
	 pos-diff1)

    (if (> (elt (matrix-row (transpose (send cds-gripper :rot)) 2) 1) 0) 
	(progn
	  (send cds-knob :rotate (deg2rad 90) :y)
	  (send cds-knob :rotate (deg2rad 90) :z))
      (send cds-knob :rotate (deg2rad -90) :x))
    
    (dotimes (i 2)
      (send *pr2* :angle-vector pre-av)      
      (if (= i 0)
	  (progn
	    (setq tgt-pos (rotate-knob 10 t))
	    (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
	    (setq pos-diff0 (norm (v- (send *pr2* use-arm :end-coords :worldpos) (send tgt-pos :worldpos)))))
	(progn
	  (setq tgt-pos (rotate-knob 10 nil))
	  (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
	  (setq pos-diff1 (norm (v- (send *pr2* use-arm :end-coords :worldpos) (send tgt-pos :worldpos))))))
	
      (send *ri* :angle-vector pre-av 500)
      (send *ri* :wait-interpolation))
    (if (< pos-diff0 pos-diff1)
	(progn
	  (ros::ros-warn "knob-axis: plus")
	  (setq *knob-axis-plus* t)
	  (setq *cds-knob-init*	(send cds-knob :translate (float-vector 0.0 r  0.0)))
	  (return-from test-knob-direction t))
      (progn
	(ros::ros-warn "knob-axis: minus")
	(setq *knob-axis-plus* nil)
	(setq *cds-knob-init* (send cds-knob :translate (float-vector 0.0 (* -1 r) 0.0)))
	(return-from test-knob-direction nil)))))
