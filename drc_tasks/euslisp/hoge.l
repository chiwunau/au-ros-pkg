(setq cds-gripper-pre (make-cascoords))
(setq cds-gripper (make-cascoords :coords (send cds-gripper-pre :copy-worldcoords)))
(send cds-gripper :translate (float-vector -50 0.0 0.0))

(setq cds-trans (make-coords :coords (send cds-gripper-pre :transformation cds-gripper)))

(dotimes (i 1)
  (let ((c (make-cube 10 10 10 :coords (send cds-gripper :copy-worldcoords))))
    (send c :set-color :red)
    (send *irtviewer* :objects c (send cds-gripper :copy-worldcoords))
    (setq cds-gripper-pre (send cds-gripper :copy-worldcoords))
    (send cds-gripper :transform cds-trans :local)
    (send *irtviewer* :draw-objects)
    ))

(let ((cds (send cds-gripper :copy-worldcoords)))
  (dotimes (i 20)
    (let ((c (make-cube 10 10 10 :coords (send cds :copy-worldcoords))))
      (send c :set-color :red)
      (send *irtviewer* :objects c (send cds-gripper :copy-worldcoords))
      (send cds :transform cds-trans :local)
      (send *irtviewer* :draw-objects)
      )))

;(send cds-gripper :rotate (deg2rad (* -1 2)) :z)
;(send cds-gripper :rotate (deg2rad (* 1 1)) :x)
(send cds-gripper :translate (float-vector 0.0 -10.0 -10.0))

;;
(setq diff-cds (make-coords))
(setq dif-v (send (send cds-gripper-pre :transformation cds-gripper) :pos))
(print dif-v)
(setq v-proj (float-vector (elt dif-v 0) (elt dif-v 1) 0.0))
;;
(setq ang-z (vector-angle #f(1 0 0) v-proj #f(0 0 1)))
(if (> ang-z 0)
    (send diff-cds :rotate (+ (* -1 Pi) ang-z) :z)
  (send diff-cds :rotate (+ Pi ang-z) :z))
(setq dif-v (send diff-cds :inverse-transform-vector dif-v))
(setq ang-y (vector-angle #f(1 0 0) dif-v #f(0 1 0)))
(if (> ang-y 0)
    (send diff-cds :rotate (+ (* -1 Pi) ang-y) :y)
  (send diff-cds :rotate (+ Pi ang-y) :y))
    
;;
(send cds-trans :transform diff-cds :local)
(dotimes (i 1)
  (let ((c (make-cube 10 10 10 :coords (send cds-gripper :copy-worldcoords))))
    (send c :set-color :green)
    (send *irtviewer* :objects c (send cds-gripper :copy-worldcoords))
    (send cds-gripper :transform cds-trans :local)
    (setq cds-gripper-pre (send cds-gripper :copy-worldcoords))
    (send *irtviewer* :draw-objects)
    ))
(let ((cds (send cds-gripper :copy-worldcoords)))
  (dotimes (i 8)
    (let ((c (make-cube 10 10 10 :coords (send cds :copy-worldcoords))))
      (send c :set-color :green)
      (send *irtviewer* :objects c (send cds-gripper :copy-worldcoords))
      (send cds :transform cds-trans :local)
      (send *irtviewer* :draw-objects)
    )))

