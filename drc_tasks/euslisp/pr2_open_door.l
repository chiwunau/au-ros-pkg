
(defun init ()
  (send *pr2* :reset-pose)
  (setq tgt (make-cube 20 20 20))
  (send tgt :set-color :red)
  (send tgt :locate (send *pr2* :rarm :end-coords :worldpos))
  (send tgt :translate #f(200 100 0))
  (send tgt :rotate (deg2rad 90) :x)
  (setq *irtviewer* (make-irtviewer))
  (send *pr2* :larm :inverse-kinematics (send tgt :copy-worldcoords))
)

(defun rotate-knob (r tgt-deg)
  (send *pr2* :angle-vector (send *ri* :state :potentio-vector)) 
  (let ((d 0) 
	(c (send *pr2* :larm :end-coords :copy-worldcoords))
	(av-seq nil))
    (send *irtviewer* :objects c)
    (while (< d tgt-deg)
      (setq d (+ d 1))
      (send c :rotate (deg2rad -1) :x :world)
      (send c :translate (float-vector 0.0 (- (* r (sin (deg2rad 1)))) 0.0))
      (send *pr2* :larm :inverse-kinematics c)
      (setq av-seq (append av-seq (list (send *pr2* :angle-vector))))
      (send *irtviewer* :draw-objects))
    (send *ri* :angle-vector-sequence av-seq 100)
    ))

(defun pull-door (r tgt-deg)
  (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
  (let ((d 0)
	(c_hand (make-cascoords :coords (send *pr2* :larm :end-coords :copy-worldcoords)))
	(c_door (make-cascoords :pos (send *pr2* :larm :end-coords :worldpos)))
	(av-seq nil))
    (send *irtviewer* :objects c_hand c_door)
    (send c_door :assoc c_hand)
    (while (< d tgt-deg)
      (setq d (+ d 1))
      (send c_door :rotate (deg2rad -1) :z)
      (send c_door :translate (float-vector (- (* r (sin (deg2rad 1)))) 0.0 0.0))
      (send *pr2* :larm :inverse-kinematics (send c_hand :copy-worldcoords))
      (setq av-seq (append av-seq (list (send *pr2* :angle-vector))))
      (send *irtviewer* :draw-objects))
    (send *ri* :angle-vector-sequence av-seq 100)
))

      
