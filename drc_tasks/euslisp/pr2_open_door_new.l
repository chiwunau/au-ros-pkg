(defun rotate-knob (r tgt-deg)
  (send *pr2* :angle-vector (send *ri* :state :potentio-vector)) 
  (let ((d 0) 
	(c_handle (make-cascoords :pos (send *pr2* :larm :end-coords :worldpos)))
	(c_hand (make-cascoords :coords (send *pr2* :larm :end-coords :copy-worldcoords)))
	(av-seq nil))
    (send c_handle :assoc c_hand)
    (send *irtviewer* :objects c_handle c_hand)
    (while (< d tgt-deg)
      (setq d (+ d 1))
      (send c_handle :rotate (deg2rad -1) :x :world)
      (send c_handle :translate (float-vector 0.0 0.0 (- (* r (sin (deg2rad 1))))))
      (send *pr2* :larm :inverse-kinematics (send c_hand :copy-worldcoords) :rotation-axis t)
      (setq av-seq (append av-seq (list (send *pr2* :angle-vector))))
      (send *irtviewer* :draw-objects :flush t))
    (send *ri* :angle-vector-sequence av-seq 100)
    ))

(defun arm-circular-av-seq (r tgt-deg)
    (let ((d 0) 
	  (cds_world (make-cascoords :pos (send *pr2* :larm :end-coords :worldpos)))
	  (cds_tgt (make-cascoords :coords (send *pr2* :larm :end-coords :copy-worldcoords)))
	  (av-seq nil))
      (send cds_world :assoc cds_tgt)
      (while (< d tgt-deg)
      (setq d (+ d 1))
      (send cds_world :rotate (deg2rad -1) :x :world)
      (send cds_world :translate (float-vector 0.0 0.0 (- (* r (sin (deg2rad 1))))))
      (send *pr2* :larm :inverse-kinematics (send c_hand :copy-worldcoords) :rotation-axis t)
      (setq av-seq (append av-seq (list (send *pr2* :angle-vector)))))
      (av-seq)))

(defun test-door-direction (r)
  (let ((av-org (send *ri* :state :potentio-vector))
	(cds_world (make-cascoords :pos (send *pr2* :larm :end-coords :worldpos)))
	(cds_tgt (make-cascoords :coords (send *pr2* :larm :end-coords :copy-worldcoords)))
	(av-seq (list (send *pr2* :angle-vector)))
	d res move_dist dis)
    (send cds_world :assoc cds_tgt)
    (dotimes (i 2)
      (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
      (setq move_dist (* r (sin (deg2rad 5))))
      (dotimes (d 5)
	(send cds_world :translate (float-vector 
				    (* (if (= i 0) -1 1) r (deg2rad 1))  0.0 0.0))
	(send *pr2* :larm :inverse-kinematics (send cds_tgt :copy-worldcoords) :rotation-axis t)
	(setq av-seq (append av-seq (list (send *pr2* :angle-vector)))))
      (send *ri* :angle-vector-sequence av-seq 100)
      (send *ri* :wait-interpolation)
      (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
      (setq res (send *pr2* :larm :end-coords :copy-worldcoords))
      (setq dis (v- (send res :worldpos) (send cds_tgt :worldpos)))
      
      (cond 
       ((and (= i 0) (< (abs (elt dis 0)) (/ move_dist 2.0)) (< (elt dis 1) 0))
	(ros::ros-warn "pull: t axis-up: nil")
	(send *ri* :angle-vector av-org)
	(return-from test-door-direction (list t nil)))
       ((and (= i 0) (< (abs (elt dis 0)) (/ move_dist 2.0)) (> (elt dis 1) 0))
	(send *ri* :angle-vector av-org)
	(ros::ros-warn "pull: t axis-up: t")
	(return-from test-door-direction (list t t)))
       ((and (= i 1) (< (abs (elt dis 0)) (/ move_dist 2.0)) (< (elt dis 1) 0))
	(send *ri* :angle-vector av-org)
	(ros::ros-warn "pull: nil axis-up: t")
	(return-from test-door-direction (list nil t)))
       ((and (= i 1) (< (abs (elt dis 0)) (/ move_dist 2.0)) (> (elt dis 1) 0))
	(send *ri* :angle-vector av-org)
	(ros::ros-warn "pull: nil axis-up: nil")
	(return-from test-door-direction (list nil nil)))
       (t 
	(send *ri* :angle-vector av-org)
	(send *ri* :wait-interpolation))
       ))
  (ros::ros-warn "failed to detect direction of door")
  ))

       
       
	
      

	 

      
