#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
// PCL specific includes
#include <pcl/ros/conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/console/parse.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/io/pcd_io.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/sample_consensus/sac_model_plane.h>
#include <pcl/sample_consensus/sac_model_sphere.h>
#include <boost/thread/thread.hpp>
#include <pcl/sample_consensus/sac_model_line.h>


void cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input);
ros::Publisher pub;
int main (int argc, char** argv)
{
  ros::init(argc, argv, "extract_line");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe ("/pcl_nodelet/cluster_decomposer/output00", 1, cloud_cb);
  pub = nh.advertise<sensor_msgs::PointCloud2> ("output_cloud",1);
  ros::spin();
}

void cloud_cb (const sensor_msgs::PointCloud2ConstPtr& input)
{
  pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);
  pcl::PointCloud<pcl::PointXYZ>::Ptr final (new pcl::PointCloud<pcl::PointXYZ>);
  pcl::fromROSMsg(*input, *cloud);
  sensor_msgs::PointCloud2 output_cloud;
  std::vector<int> inliers;

  pcl::SampleConsensusModelLine<pcl::PointXYZ>::Ptr
    model_l (new pcl::SampleConsensusModelLine<pcl::PointXYZ> (cloud));
      pcl::RandomSampleConsensus<pcl::PointXYZ> ransac (model_l);

      ransac.setDistanceThreshold (.005);
      ransac.computeModel();
      ransac.getInliers(inliers);
      pcl::copyPointCloud<pcl::PointXYZ>(*cloud, inliers, *final);
      
      Eigen::VectorXf model_coefficients;
      model_l -> computeModelCoefficients (inliers, model_coefficients);  
      
      pcl::toROSMsg(*final, output_cloud);
      pub.publish(output_cloud);
}
